using System.CodeDom.Compiler;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace HKW.HKWReactiveUI.SourceGenerator;

internal class ClassGenerator
{
    public static void Execute(
        GeneratorExecutionContext executionContext,
        ClassGenerateInfo generateInfo
    )
    {
        var t = new ClassGenerator()
        {
            ExecutionContext = executionContext,
            GeneratorInfo = generateInfo
        };
        t.GenerateClass(generateInfo);
    }

    public static string FirstClassFullName = string.Empty;
    public GeneratorExecutionContext ExecutionContext { get; private set; }
    public ClassGenerateInfo GeneratorInfo { get; private set; } = null!;

    private void GenerateClass(ClassGenerateInfo classInfo)
    {
        var stringStream = new StringWriter();
        var writer = new IndentedTextWriter(stringStream, "\t");
        writer.WriteLine("// <auto-generated>");
        writer.WriteLine("#nullable enable");
        // 添加全部引用
        writer.WriteLine(classInfo.Usings);
        // 手动添加ReactiveUI引用
        if (classInfo.Usings.All(x => x.ToString() != "using ReactiveUI;"))
            writer.WriteLine("using ReactiveUI;");
        // 添加命名空间
        writer.WriteLine($"namespace {classInfo.Namespace}");
        writer.WriteLine("{");
        writer.Indent++;
        if (classInfo.FullTypeName == FirstClassFullName)
        {
            // 添加ReferenceType特性,并引用ReactiveObject
            // 防止编译器优化,如果整个项目中不引用ReactiveUI,则ReactiveUI的Assembly不会被程序集引用,会导致Fody无法正常构建
            writer.WriteLine("[HKW.HKWReactiveUI.ReferenceType(typeof(ReactiveObject))]");
        }
        // 检测是否为抽象类
        var isAbstract = classInfo.DeclarationSyntax.Modifiers.Any(SyntaxKind.AbstractKeyword);
        // 获取可访问性
        var accessibility = classInfo.DeclarationSyntax.Modifiers.GetAccessibility();
        writer.WriteLine(
            $"{accessibility}{(isAbstract ? " abstract" : string.Empty)} partial class {classInfo.TypeName}"
        );
        // 添加约束列表
        writer.WriteLine($"{classInfo.DeclarationSyntax.ConstraintClauses}");
        writer.WriteLine("{");
        writer.Indent++;

        GenerateMember(classInfo, writer);
        writer.WriteLine();
        GenerateInitializeReactiveObject(classInfo, writer);

        writer.Indent--;
        writer.WriteLine("}");
        writer.Indent--;
        writer.WriteLine("}");

        ExecutionContext.AddSource($"{classInfo.Name}.ReactiveUI.g.cs", stringStream.ToString());

        //Console.Out.WriteLine(stringStream);
    }

    private void GenerateMember(ClassGenerateInfo generateInfo, IndentedTextWriter writer)
    {
        foreach (var member in generateInfo.Members)
        {
            writer.WriteLine(member);
        }
    }

    private void GenerateInitializeReactiveObject(
        ClassGenerateInfo generateInfo,
        IndentedTextWriter writer
    )
    {
        writer.WriteLine("/// <inheritdoc/>");
        if (generateInfo.IsReactiveObjectX)
        {
            writer.WriteLine("protected override void InitializeReactiveObject()");
        }
        else
        {
            writer.WriteLine("protected void InitializeReactiveObject()");
        }
        writer.WriteLine("{");
        writer.Indent++;

        if (generateInfo.PropertyChangedMembers.Count > 0)
        {
            writer.WriteLine($"PropertyChanged += ReactiveObjectPropertyChanged;");
        }

        writer.WriteLine();
        GenerateInitializeMember(generateInfo, writer);

        writer.Indent--;
        writer.WriteLine("}");

        writer.WriteLine();
        if (generateInfo.PropertyChangedMembers.Count > 0)
        {
            GeneratePropertyChanged(generateInfo, writer);
        }
    }

    private void GeneratePropertyChanged(ClassGenerateInfo generateInfo, IndentedTextWriter writer)
    {
        writer.WriteLine(
            "private void ReactiveObjectPropertyChanged(object? sender, global::System.ComponentModel.PropertyChangedEventArgs e)"
        );
        writer.WriteLine("{");
        writer.Indent++;
        foreach (var pair in generateInfo.PropertyChangedMembers)
        {
            writer.WriteLine($"if (e.PropertyName == nameof({pair.Key}))");
            writer.WriteLine("{");
            writer.Indent++;

            foreach (var member in pair.Value)
            {
                writer.WriteLine(member);
            }

            writer.Indent--;
            writer.WriteLine("}");
        }

        writer.Indent--;
        writer.WriteLine("}");
    }

    private void GenerateInitializeMember(ClassGenerateInfo generateInfo, IndentedTextWriter writer)
    {
        foreach (var member in generateInfo.InitializeMembers)
        {
            writer.WriteLine(member);
        }
    }
}
